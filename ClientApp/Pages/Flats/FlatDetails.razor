@page "/flat/details/{Id:int}"

@inject ILocalStorageService localStorageService
@inject IFlatService flatService
@inject IJSRuntime jsRuntime
@inject IStripePaymentService stripePaymentService
@inject IOrderDetailsService orderDetailsService

@attribute [Authorize(Roles = StaticDetails.Role_Customer)]

<div>
    @if (FlatBooking?.OrderDetails?.FlatDTO?.FlatImages == null)
    {
        <div class="spinner">

        </div>
    }
    else
    {
        <div class="mt-4 mx-4 px-0 px-md-5 mx-md-5">
            <div>
                <a href="flats/all" class="btn btn-warning">
                    Back
                </a>
            </div>
            <div class="row p-2 my-3">
                <div class="col-12 col-lg-7 p-4" style="border: 1px solid #808080">
                    <div class="row px-2 text-success border-bottom">
                        <div>
                            <p style="font-size:x-large;margin:0px;">
                                Selected Flat
                            </p>
                        </div>
                    </div>

                    <div class="row">

                        <div class="col-6">
                            <div id="" class="carousel slide mb-4 m-md-3 m-0 pt-3 pt-md-0" data-ride="carousel">
                                <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
                                    <ol class="carousel-indicators">
                                        @{
                                            int imageIndex = 0;
                                            int innerImageIndex = 0;
                                        }
                                        @foreach (var img in FlatBooking.OrderDetails.FlatDTO.FlatImages)
                                        {
                                            if (imageIndex == 0)
                                            {
                                                <li data-target="#carouselExampleIndicators"
                                                    data-slide-to="@imageIndex" class="active"></li>
                                            }
                                            else
                                            {
                                                <li data-target="#carouselExampleIndicators"
                                                    data-slide-to="@imageIndex"></li>
                                            }
                                            imageIndex++;
                                        }
                                    </ol>
                                    <div class="carousel-inner">
                                        @foreach (var image in FlatBooking.OrderDetails.FlatDTO.FlatImages)
                                        {
                                            if (innerImageIndex == 0)
                                            {
                                                <div class="carousel-item active">
                                                    <img class="d-block w-100" style="border-radius:20px;"
                                                         src="@image.FlatImageUrl" alt="First slide">
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="carousel-item">
                                                    <img class="d-block w-100" style="border-radius:20px;"
                                                         src="@image.FlatImageUrl" alt="First slide">
                                                </div>
                                            }
                                            innerImageIndex++;
                                        }
                                    </div>
                                    <a class="carousel-control-prev" href="#carouselExampleIndicators"
                                       role="button" data-slide="prev">
                                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                        <span class="sr-only">
                                            Previous
                                        </span>
                                    </a>
                                    <a class="carousel-control-next" href="#carouselExampleIndicators"
                                       role="button" data-slide="next">
                                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                        <span class="sr-only">
                                            Next
                                        </span>
                                    </a>
                                </div>
                            </div>
                        </div>

                        <div class="col-6">
                            <span class="float-right pt-4">
                                <span class="float-right">
                                    Rooms count : @FlatBooking.OrderDetails.FlatDTO.RoomCount
                                </span>
                                <br />
                                <span class="float-right pt-1">
                                    Flat area : @FlatBooking.OrderDetails.FlatDTO.FlatArea sqft
                                </span>
                                <br />
                                <h4 class="text-warning font-weight-bold pt-5 pl-5">
                                    USD
                                    <span style="border-bottom:1px solid #ff6a00; font-weight: bolder;">
                                        @FlatBooking.OrderDetails.FlatDTO.TotalAmount
                                    </span>
                                </h4>
                                <span class="float-right">
                                    Cost for @FlatBooking.OrderDetails.FlatDTO.TotalDays days
                                </span>
                            </span>
                        </div>

                    </div>

                    <div class="row p-2">

                        <div class="col-12">
                            <p class="card-title text-warning" style="font-size:xx-large">
                                @FlatBooking.OrderDetails.FlatDTO.Name
                            </p>
                            <p class="card-text" style="font-size:large">
                                @((MarkupString)FlatBooking.OrderDetails.FlatDTO.Description)
                            </p>
                        </div>

                    </div>
                </div>

                <div class="col-12 col-lg-5 p-4 2 mt-4 mt-md-0" style="border: 1px solid #808080;">
                    <EditForm Model="FlatBooking" class="container" OnValidSubmit="HandleCheckout">

                        <div class="row px-2 text-success border-bottom">
                            <div class="col-7 py-1">
                                <p style="font-size:x-large;margin:0px;">
                                    Enter Details
                                </p>
                            </div>
                        </div>

                        <div class="form-group pt-2">
                            <label class="text-warning">
                                Name
                            </label>
                            <InputText @bind-Value="FlatBooking.OrderDetails.Name" type="text" class="form-control" />
                        </div>

                        <div class="form-group pt-2">
                            <label class="text-warning">
                                Phone
                            </label>
                            <InputText @bind-Value="FlatBooking.OrderDetails.Phone" type="text" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label class="text-warning">
                                Email
                            </label>
                            <InputText @bind-Value="FlatBooking.OrderDetails.Email" type="text" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label class="text-warning">
                                Check in Date
                            </label>
                            <InputDate @bind-Value="FlatBooking.OrderDetails.CheckInDate" type="date" disabled class="form-control" />
                        </div>

                        <div class="form-group">
                            <label class="text-warning">
                                Check Out Date
                            </label>
                            <InputDate @bind-Value="FlatBooking.OrderDetails.CheckOutDate" type="date" disabled class="form-control" />
                        </div>

                        <div class="form-group">
                            @if (FlatBooking.OrderDetails.FlatDTO.IsBooked)
                            {
                                <input class="btn btn-secondary form-control" value="Sold Out" />
                            }
                            else
                            {
                                <button type="submit" class="btn btn-success form-control">
                                    Checkout Now
                                </button>
                            }
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    }

</div>

@code {
    [Parameter]
    public int? Id { get; set; }
    public BookingViewModel FlatBooking { get; set; } = new BookingViewModel();
    private int NumberOfNights { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //await Task.Delay(5000); // For debugging
            FlatBooking.OrderDetails = new OrderDetailsDTO();

            if (Id != null)
            {
                if (await localStorageService.GetItemAsync<HomeViewModel>(StaticDetails.Local_InitialBooking) != null)
                {
                    var flatInitialInfo = await localStorageService.GetItemAsync<HomeViewModel>(StaticDetails.Local_InitialBooking);

                    FlatBooking.OrderDetails.FlatDTO = await flatService.
                        GetFlat(Id.Value, flatInitialInfo.StartDate.ToString("MM/dd/yyyy"), flatInitialInfo.EndDate.ToString("MM/dd/yyyy"));

                    NumberOfNights = flatInitialInfo.NumberOfNights;

                    FlatBooking.OrderDetails.CheckInDate = flatInitialInfo.StartDate;
                    FlatBooking.OrderDetails.CheckOutDate = flatInitialInfo.EndDate;
                    FlatBooking.OrderDetails.FlatDTO.TotalDays = flatInitialInfo.NumberOfNights;
                    FlatBooking.OrderDetails.FlatDTO.TotalAmount = flatInitialInfo.NumberOfNights * FlatBooking.OrderDetails.FlatDTO.Price;
                }
                else
                {
                    FlatBooking.OrderDetails.FlatDTO = await flatService.
                        GetFlat(Id.Value, DateTime.Now.ToString("MM/dd/yyyy"), DateTime.Now.AddDays(1).ToString("MM/dd/yyyy"));

                    NumberOfNights = 1;

                    FlatBooking.OrderDetails.CheckInDate = DateTime.Now;
                    FlatBooking.OrderDetails.CheckOutDate = DateTime.Now.AddDays(1);
                    FlatBooking.OrderDetails.FlatDTO.TotalDays = 1;
                    FlatBooking.OrderDetails.FlatDTO.TotalAmount = FlatBooking.OrderDetails.FlatDTO.Price;
                }
            }

            if (await localStorageService.GetItemAsync<UserDTO>(StaticDetails.Local_UserDetails) != null)
            {
                var user = await localStorageService.GetItemAsync<UserDTO>(StaticDetails.Local_UserDetails);

                FlatBooking.OrderDetails.UserId = user.Id;
                FlatBooking.OrderDetails.Name = user.Name;
                FlatBooking.OrderDetails.Email = user.Email;
                FlatBooking.OrderDetails.Phone = user.PhoneNumber;
            }

        }
        catch (Exception ex)
        {
            await jsRuntime.ToastrError(ex.Message);
        }
    }

    private async Task HandleNumberOfNightsChange(ChangeEventArgs e)
    {
        NumberOfNights = Convert.ToInt32(e.Value.ToString());
        FlatBooking.OrderDetails.FlatDTO = await flatService.GetFlat(Id.Value,
            FlatBooking.OrderDetails.CheckInDate.ToString("MM/dd/yyyy"),
            FlatBooking.OrderDetails.CheckInDate.AddDays(NumberOfNights).ToString("MM/dd/yyyy"));

        FlatBooking.OrderDetails.CheckOutDate = FlatBooking.OrderDetails.CheckInDate.AddDays(NumberOfNights);
        FlatBooking.OrderDetails.FlatDTO.TotalDays = NumberOfNights;
        FlatBooking.OrderDetails.FlatDTO.TotalAmount = NumberOfNights * FlatBooking.OrderDetails.FlatDTO.Price;
    }

    // This method configure Stripe payment
    private async Task HandleCheckout()
    {
        if (!await HandleValidation())
        {
            return;
        }

        try
        {
            var paymentDTO = new StripePaymentDTO()
            {
                Amount = Convert.ToInt32(FlatBooking.OrderDetails.FlatDTO.TotalAmount /** 100*/), // just add *100 if you have error in Stripe page, because Stripe use cents.
                ProductName = FlatBooking.OrderDetails.FlatDTO.Name,
                ReturnUrl = "/flat/details/" + Id
            };

            var result = await stripePaymentService.CheckOut(paymentDTO);

            FlatBooking.OrderDetails.StripeSessionId = result.Data.ToString();
            FlatBooking.OrderDetails.FlatId = FlatBooking.OrderDetails.FlatDTO.Id;
            FlatBooking.OrderDetails.TotalCost = FlatBooking.OrderDetails.FlatDTO.TotalAmount;

            var flatOrderDetailsSaved = await orderDetailsService.SaveOrderDetails(FlatBooking.OrderDetails);

            await localStorageService.SetItemAsync(StaticDetails.Local_FlatOrderDetails, flatOrderDetailsSaved);

            await jsRuntime.InvokeVoidAsync("redirectToCheckout", result.Data.ToString());
        }
        catch (Exception ex)
        {
            await jsRuntime.ToastrError(ex.Message);
        }
    }

    private async Task<bool> HandleValidation()
    {
        if (string.IsNullOrEmpty(FlatBooking.OrderDetails.Name))
        {
            await jsRuntime.ToastrError("Name can't be empty");
            return false;
        }
        if (string.IsNullOrEmpty(FlatBooking.OrderDetails.Phone))
        {
            await jsRuntime.ToastrError("Phone can't be empty");
            return false;
        }
        if (string.IsNullOrEmpty(FlatBooking.OrderDetails.Email))
        {
            await jsRuntime.ToastrError("Email can't be empty");
            return false;
        }

        return true;
    }
}
